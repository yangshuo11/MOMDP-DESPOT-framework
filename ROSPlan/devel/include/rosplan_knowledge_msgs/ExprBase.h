// Generated by gencpp from file rosplan_knowledge_msgs/ExprBase.msg
// DO NOT EDIT!


#ifndef ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_EXPRBASE_H
#define ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_EXPRBASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rosplan_knowledge_msgs/DomainFormula.h>

namespace rosplan_knowledge_msgs
{
template <class ContainerAllocator>
struct ExprBase_
{
  typedef ExprBase_<ContainerAllocator> Type;

  ExprBase_()
    : expr_type(0)
    , constant(0.0)
    , function()
    , op(0)
    , special_type(0)  {
    }
  ExprBase_(const ContainerAllocator& _alloc)
    : expr_type(0)
    , constant(0.0)
    , function(_alloc)
    , op(0)
    , special_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _expr_type_type;
  _expr_type_type expr_type;

   typedef double _constant_type;
  _constant_type constant;

   typedef  ::rosplan_knowledge_msgs::DomainFormula_<ContainerAllocator>  _function_type;
  _function_type function;

   typedef uint8_t _op_type;
  _op_type op;

   typedef uint8_t _special_type_type;
  _special_type_type special_type;



  enum {
    CONSTANT = 0u,
    FUNCTION = 1u,
    OPERATOR = 2u,
    SPECIAL = 3u,
    ADD = 0u,
    SUB = 1u,
    MUL = 2u,
    DIV = 3u,
    UMINUS = 4u,
    HASHT = 0u,
    TOTAL_TIME = 1u,
    DURATION = 2u,
  };


  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> const> ConstPtr;

}; // struct ExprBase_

typedef ::rosplan_knowledge_msgs::ExprBase_<std::allocator<void> > ExprBase;

typedef boost::shared_ptr< ::rosplan_knowledge_msgs::ExprBase > ExprBasePtr;
typedef boost::shared_ptr< ::rosplan_knowledge_msgs::ExprBase const> ExprBaseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosplan_knowledge_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg'], 'rosplan_knowledge_msgs': ['/home/ys/MOMDP_DESPOT/ROSPlan/src/rosplan/rosplan_knowledge_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d33d1b51272864ef936be512369146f";
  }

  static const char* value(const ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d33d1b51272864eULL;
  static const uint64_t static_value2 = 0xf936be512369146fULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_knowledge_msgs/ExprBase";
  }

  static const char* value(const ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message used to represent a numerical expression; base types (1/2)\n\
\n\
# expression types\n\
uint8 CONSTANT = 0\n\
uint8 FUNCTION = 1\n\
uint8 OPERATOR = 2\n\
uint8 SPECIAL  = 3\n\
\n\
# operators\n\
uint8 ADD    = 0\n\
uint8 SUB    = 1\n\
uint8 MUL    = 2\n\
uint8 DIV    = 3\n\
uint8 UMINUS = 4\n\
\n\
# special types\n\
uint8 HASHT      = 0\n\
uint8 TOTAL_TIME = 1\n\
uint8 DURATION   = 2\n\
\n\
# expression base type\n\
uint8 expr_type\n\
\n\
# constant value\n\
float64 constant\n\
\n\
# function\n\
rosplan_knowledge_msgs/DomainFormula function\n\
\n\
# operator\n\
uint8 op\n\
\n\
# special\n\
uint8 special_type\n\
\n\
================================================================================\n\
MSG: rosplan_knowledge_msgs/DomainFormula\n\
# A message used to represent an atomic formula from the domain.\n\
# typed_parameters matches label -> type\n\
string name\n\
diagnostic_msgs/KeyValue[] typed_parameters\n\
\n\
================================================================================\n\
MSG: diagnostic_msgs/KeyValue\n\
string key # what to label this value when viewing\n\
string value # a value to track over time\n\
";
  }

  static const char* value(const ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.expr_type);
      stream.next(m.constant);
      stream.next(m.function);
      stream.next(m.op);
      stream.next(m.special_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExprBase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_knowledge_msgs::ExprBase_<ContainerAllocator>& v)
  {
    s << indent << "expr_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.expr_type);
    s << indent << "constant: ";
    Printer<double>::stream(s, indent + "  ", v.constant);
    s << indent << "function: ";
    s << std::endl;
    Printer< ::rosplan_knowledge_msgs::DomainFormula_<ContainerAllocator> >::stream(s, indent + "  ", v.function);
    s << indent << "op: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.op);
    s << indent << "special_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.special_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_KNOWLEDGE_MSGS_MESSAGE_EXPRBASE_H
