// Generated by gencpp from file rosplan_dispatch_msgs/EsterelPlanEdge.msg
// DO NOT EDIT!


#ifndef ROSPLAN_DISPATCH_MSGS_MESSAGE_ESTERELPLANEDGE_H
#define ROSPLAN_DISPATCH_MSGS_MESSAGE_ESTERELPLANEDGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplan_dispatch_msgs
{
template <class ContainerAllocator>
struct EsterelPlanEdge_
{
  typedef EsterelPlanEdge_<ContainerAllocator> Type;

  EsterelPlanEdge_()
    : edge_id(0)
    , edge_name()
    , signal_type(0)
    , source_ids()
    , sink_ids()
    , duration_lower_bound(0.0)
    , duration_upper_bound(0.0)  {
    }
  EsterelPlanEdge_(const ContainerAllocator& _alloc)
    : edge_id(0)
    , edge_name(_alloc)
    , signal_type(0)
    , source_ids(_alloc)
    , sink_ids(_alloc)
    , duration_lower_bound(0.0)
    , duration_upper_bound(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _edge_id_type;
  _edge_id_type edge_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _edge_name_type;
  _edge_name_type edge_name;

   typedef int32_t _signal_type_type;
  _signal_type_type signal_type;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _source_ids_type;
  _source_ids_type source_ids;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sink_ids_type;
  _sink_ids_type sink_ids;

   typedef double _duration_lower_bound_type;
  _duration_lower_bound_type duration_lower_bound;

   typedef double _duration_upper_bound_type;
  _duration_upper_bound_type duration_upper_bound;





  typedef boost::shared_ptr< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> const> ConstPtr;

}; // struct EsterelPlanEdge_

typedef ::rosplan_dispatch_msgs::EsterelPlanEdge_<std::allocator<void> > EsterelPlanEdge;

typedef boost::shared_ptr< ::rosplan_dispatch_msgs::EsterelPlanEdge > EsterelPlanEdgePtr;
typedef boost::shared_ptr< ::rosplan_dispatch_msgs::EsterelPlanEdge const> EsterelPlanEdgeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosplan_dispatch_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rosplan_dispatch_msgs': ['/home/ys/MOMDP_DESPOT/ROSPlan/src/rosplan/rosplan_dispatch_msgs/msg', '/home/ys/MOMDP_DESPOT/ROSPlan/devel/share/rosplan_dispatch_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbbf05c7357969fc7b48ff26fa7775db";
  }

  static const char* value(const ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbbf05c7357969fcULL;
  static const uint64_t static_value2 = 0x7b48ff26fa7775dbULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplan_dispatch_msgs/EsterelPlanEdge";
  }

  static const char* value(const ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#EsterelPlanEdge message\n\
int32 edge_id\n\
string edge_name\n\
int32 signal_type\n\
int32[] source_ids\n\
int32[] sink_ids\n\
float64 duration_lower_bound\n\
float64 duration_upper_bound\n\
";
  }

  static const char* value(const ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.edge_id);
      stream.next(m.edge_name);
      stream.next(m.signal_type);
      stream.next(m.source_ids);
      stream.next(m.sink_ids);
      stream.next(m.duration_lower_bound);
      stream.next(m.duration_upper_bound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EsterelPlanEdge_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplan_dispatch_msgs::EsterelPlanEdge_<ContainerAllocator>& v)
  {
    s << indent << "edge_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.edge_id);
    s << indent << "edge_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.edge_name);
    s << indent << "signal_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.signal_type);
    s << indent << "source_ids[]" << std::endl;
    for (size_t i = 0; i < v.source_ids.size(); ++i)
    {
      s << indent << "  source_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.source_ids[i]);
    }
    s << indent << "sink_ids[]" << std::endl;
    for (size_t i = 0; i < v.sink_ids.size(); ++i)
    {
      s << indent << "  sink_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sink_ids[i]);
    }
    s << indent << "duration_lower_bound: ";
    Printer<double>::stream(s, indent + "  ", v.duration_lower_bound);
    s << indent << "duration_upper_bound: ";
    Printer<double>::stream(s, indent + "  ", v.duration_upper_bound);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLAN_DISPATCH_MSGS_MESSAGE_ESTERELPLANEDGE_H
