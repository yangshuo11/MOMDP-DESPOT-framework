// Auto-generated. Do not edit!

// (in-package rosplan_dispatch_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class PlanFeedback {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.current_phase = null;
      this.current_status = null;
      this.percent_completed = null;
    }
    else {
      if (initObj.hasOwnProperty('current_phase')) {
        this.current_phase = initObj.current_phase
      }
      else {
        this.current_phase = '';
      }
      if (initObj.hasOwnProperty('current_status')) {
        this.current_status = initObj.current_status
      }
      else {
        this.current_status = '';
      }
      if (initObj.hasOwnProperty('percent_completed')) {
        this.percent_completed = initObj.percent_completed
      }
      else {
        this.percent_completed = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type PlanFeedback
    // Serialize message field [current_phase]
    bufferOffset = _serializer.string(obj.current_phase, buffer, bufferOffset);
    // Serialize message field [current_status]
    bufferOffset = _serializer.string(obj.current_status, buffer, bufferOffset);
    // Serialize message field [percent_completed]
    bufferOffset = _serializer.int32(obj.percent_completed, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type PlanFeedback
    let len;
    let data = new PlanFeedback(null);
    // Deserialize message field [current_phase]
    data.current_phase = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [current_status]
    data.current_status = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [percent_completed]
    data.percent_completed = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.current_phase.length;
    length += object.current_status.length;
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'rosplan_dispatch_msgs/PlanFeedback';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '791f3441963c8bf65c82e3e2bc873576';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # feedback definition
    string current_phase
    string current_status
    int32 percent_completed
    
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new PlanFeedback(null);
    if (msg.current_phase !== undefined) {
      resolved.current_phase = msg.current_phase;
    }
    else {
      resolved.current_phase = ''
    }

    if (msg.current_status !== undefined) {
      resolved.current_status = msg.current_status;
    }
    else {
      resolved.current_status = ''
    }

    if (msg.percent_completed !== undefined) {
      resolved.percent_completed = msg.percent_completed;
    }
    else {
      resolved.percent_completed = 0
    }

    return resolved;
    }
};

module.exports = PlanFeedback;
