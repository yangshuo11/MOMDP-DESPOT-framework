# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplan_knowledge_msgs/KnowledgeUpdateServiceArrayRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import rosplan_knowledge_msgs.msg
import genpy
import diagnostic_msgs.msg

class KnowledgeUpdateServiceArrayRequest(genpy.Message):
  _md5sum = "5ecd6f0e0f16c6f9b14c853f37845e33"
  _type = "rosplan_knowledge_msgs/KnowledgeUpdateServiceArrayRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


uint8 ADD_KNOWLEDGE = 0
uint8 ADD_GOAL = 1
uint8 REMOVE_KNOWLEDGE = 2
uint8 REMOVE_GOAL = 3
uint8 ADD_METRIC = 4
uint8 REMOVE_METRIC = 5

uint8[] update_type
rosplan_knowledge_msgs/KnowledgeItem[] knowledge

================================================================================
MSG: rosplan_knowledge_msgs/KnowledgeItem
# A knowledge item used to represent a piece of the state in ROSPlan

uint8 INSTANCE = 0
uint8 FACT = 1
uint8 FUNCTION = 2
uint8 EXPRESSION = 3
uint8 INEQUALITY = 4

uint8 knowledge_type

# time at which this knowledge becomes true
time initial_time

# knowledge is explicitly false
bool is_negative

#---------
# INSTANCE
#---------

# instance knowledge_type
string instance_type
string instance_name

#----------------------
# PREDICATE OR FUNCTION
#----------------------

# attribute knowledge_type
string attribute_name
diagnostic_msgs/KeyValue[] values

#---------
# FUNCTION
#---------

# function value
float64 function_value

#-----------
# EXPRESSION
#-----------

string optimization
rosplan_knowledge_msgs/ExprComposite expr

#-----------
# INEQUALITY
#-----------

rosplan_knowledge_msgs/DomainInequality ineq

================================================================================
MSG: diagnostic_msgs/KeyValue
string key # what to label this value when viewing
string value # a value to track over time

================================================================================
MSG: rosplan_knowledge_msgs/ExprComposite
# A message used to represent a numerical expression; composite type (2/2)
# stores an array of ExprBase as prefix notation

# components
ExprBase[] tokens

================================================================================
MSG: rosplan_knowledge_msgs/ExprBase
# A message used to represent a numerical expression; base types (1/2)

# expression types
uint8 CONSTANT = 0
uint8 FUNCTION = 1
uint8 OPERATOR = 2
uint8 SPECIAL  = 3

# operators
uint8 ADD    = 0
uint8 SUB    = 1
uint8 MUL    = 2
uint8 DIV    = 3
uint8 UMINUS = 4

# special types
uint8 HASHT      = 0
uint8 TOTAL_TIME = 1
uint8 DURATION   = 2

# expression base type
uint8 expr_type

# constant value
float64 constant

# function
rosplan_knowledge_msgs/DomainFormula function

# operator
uint8 op

# special
uint8 special_type

================================================================================
MSG: rosplan_knowledge_msgs/DomainFormula
# A message used to represent an atomic formula from the domain.
# typed_parameters matches label -> type
string name
diagnostic_msgs/KeyValue[] typed_parameters

================================================================================
MSG: rosplan_knowledge_msgs/DomainInequality
# A message used to store the numeric effects of an action
# Can be grounded or ungrounded

uint8 GREATER   = 0
uint8 GREATEREQ = 1
uint8 LESS      = 2
uint8 LESSEQ    = 3
uint8 EQUALS    = 4

uint8 comparison_type

rosplan_knowledge_msgs/ExprComposite LHS
rosplan_knowledge_msgs/ExprComposite RHS

bool grounded
"""
  # Pseudo-constants
  ADD_KNOWLEDGE = 0
  ADD_GOAL = 1
  REMOVE_KNOWLEDGE = 2
  REMOVE_GOAL = 3
  ADD_METRIC = 4
  REMOVE_METRIC = 5

  __slots__ = ['update_type','knowledge']
  _slot_types = ['uint8[]','rosplan_knowledge_msgs/KnowledgeItem[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       update_type,knowledge

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KnowledgeUpdateServiceArrayRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.update_type is None:
        self.update_type = b''
      if self.knowledge is None:
        self.knowledge = []
    else:
      self.update_type = b''
      self.knowledge = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.update_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.knowledge)
      buff.write(_struct_I.pack(length))
      for val1 in self.knowledge:
        buff.write(_get_struct_B().pack(val1.knowledge_type))
        _v1 = val1.initial_time
        _x = _v1
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_B().pack(val1.is_negative))
        _x = val1.instance_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.instance_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.attribute_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        for val2 in val1.values:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.function_value))
        _x = val1.optimization
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v2 = val1.expr
        length = len(_v2.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v2.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v3 = val3.function
          _x = _v3.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v3.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v3.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v4 = val1.ineq
        buff.write(_get_struct_B().pack(_v4.comparison_type))
        _v5 = _v4.LHS
        length = len(_v5.tokens)
        buff.write(_struct_I.pack(length))
        for val4 in _v5.tokens:
          _x = val4
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v6 = val4.function
          _x = _v6.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v6.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val6 in _v6.typed_parameters:
            _x = val6.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val6.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v7 = _v4.RHS
        length = len(_v7.tokens)
        buff.write(_struct_I.pack(length))
        for val4 in _v7.tokens:
          _x = val4
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v8 = val4.function
          _x = _v8.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v8.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val6 in _v8.typed_parameters:
            _x = val6.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val6.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        buff.write(_get_struct_B().pack(_v4.grounded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.knowledge is None:
        self.knowledge = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.update_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.knowledge = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.KnowledgeItem()
        start = end
        end += 1
        (val1.knowledge_type,) = _get_struct_B().unpack(str[start:end])
        _v9 = val1.initial_time
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_negative,) = _get_struct_B().unpack(str[start:end])
        val1.is_negative = bool(val1.is_negative)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.instance_type = str[start:end].decode('utf-8')
        else:
          val1.instance_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.instance_name = str[start:end].decode('utf-8')
        else:
          val1.instance_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.attribute_name = str[start:end].decode('utf-8')
        else:
          val1.attribute_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.values = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.values.append(val2)
        start = end
        end += 8
        (val1.function_value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.optimization = str[start:end].decode('utf-8')
        else:
          val1.optimization = str[start:end]
        _v10 = val1.expr
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v10.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v11 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v11.name = str[start:end].decode('utf-8')
          else:
            _v11.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v11.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8')
            else:
              val5.value = str[start:end]
            _v11.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v10.tokens.append(val3)
        _v12 = val1.ineq
        start = end
        end += 1
        (_v12.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v13 = _v12.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v13.tokens = []
        for i in range(0, length):
          val4 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val4
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v14 = val4.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v14.name = str[start:end].decode('utf-8')
          else:
            _v14.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v14.typed_parameters = []
          for i in range(0, length):
            val6 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.key = str[start:end].decode('utf-8')
            else:
              val6.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.value = str[start:end].decode('utf-8')
            else:
              val6.value = str[start:end]
            _v14.typed_parameters.append(val6)
          _x = val4
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v13.tokens.append(val4)
        _v15 = _v12.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v15.tokens = []
        for i in range(0, length):
          val4 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val4
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v16 = val4.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v16.name = str[start:end].decode('utf-8')
          else:
            _v16.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v16.typed_parameters = []
          for i in range(0, length):
            val6 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.key = str[start:end].decode('utf-8')
            else:
              val6.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.value = str[start:end].decode('utf-8')
            else:
              val6.value = str[start:end]
            _v16.typed_parameters.append(val6)
          _x = val4
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v15.tokens.append(val4)
        start = end
        end += 1
        (_v12.grounded,) = _get_struct_B().unpack(str[start:end])
        _v12.grounded = bool(_v12.grounded)
        self.knowledge.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.update_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.knowledge)
      buff.write(_struct_I.pack(length))
      for val1 in self.knowledge:
        buff.write(_get_struct_B().pack(val1.knowledge_type))
        _v17 = val1.initial_time
        _x = _v17
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        buff.write(_get_struct_B().pack(val1.is_negative))
        _x = val1.instance_type
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.instance_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.attribute_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        for val2 in val1.values:
          _x = val2.key
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val2.value
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_get_struct_d().pack(val1.function_value))
        _x = val1.optimization
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v18 = val1.expr
        length = len(_v18.tokens)
        buff.write(_struct_I.pack(length))
        for val3 in _v18.tokens:
          _x = val3
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v19 = val3.function
          _x = _v19.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v19.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val5 in _v19.typed_parameters:
            _x = val5.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val5.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val3
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v20 = val1.ineq
        buff.write(_get_struct_B().pack(_v20.comparison_type))
        _v21 = _v20.LHS
        length = len(_v21.tokens)
        buff.write(_struct_I.pack(length))
        for val4 in _v21.tokens:
          _x = val4
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v22 = val4.function
          _x = _v22.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v22.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val6 in _v22.typed_parameters:
            _x = val6.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val6.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        _v23 = _v20.RHS
        length = len(_v23.tokens)
        buff.write(_struct_I.pack(length))
        for val4 in _v23.tokens:
          _x = val4
          buff.write(_get_struct_Bd().pack(_x.expr_type, _x.constant))
          _v24 = val4.function
          _x = _v24.name
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          length = len(_v24.typed_parameters)
          buff.write(_struct_I.pack(length))
          for val6 in _v24.typed_parameters:
            _x = val6.key
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
            _x = val6.value
            length = len(_x)
            if python3 or type(_x) == unicode:
              _x = _x.encode('utf-8')
              length = len(_x)
            buff.write(struct.pack('<I%ss'%length, length, _x))
          _x = val4
          buff.write(_get_struct_2B().pack(_x.op, _x.special_type))
        buff.write(_get_struct_B().pack(_v20.grounded))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.knowledge is None:
        self.knowledge = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.update_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.knowledge = []
      for i in range(0, length):
        val1 = rosplan_knowledge_msgs.msg.KnowledgeItem()
        start = end
        end += 1
        (val1.knowledge_type,) = _get_struct_B().unpack(str[start:end])
        _v25 = val1.initial_time
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 1
        (val1.is_negative,) = _get_struct_B().unpack(str[start:end])
        val1.is_negative = bool(val1.is_negative)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.instance_type = str[start:end].decode('utf-8')
        else:
          val1.instance_type = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.instance_name = str[start:end].decode('utf-8')
        else:
          val1.instance_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.attribute_name = str[start:end].decode('utf-8')
        else:
          val1.attribute_name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.values = []
        for i in range(0, length):
          val2 = diagnostic_msgs.msg.KeyValue()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.key = str[start:end].decode('utf-8')
          else:
            val2.key = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.value = str[start:end].decode('utf-8')
          else:
            val2.value = str[start:end]
          val1.values.append(val2)
        start = end
        end += 8
        (val1.function_value,) = _get_struct_d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.optimization = str[start:end].decode('utf-8')
        else:
          val1.optimization = str[start:end]
        _v26 = val1.expr
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v26.tokens = []
        for i in range(0, length):
          val3 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val3
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v27 = val3.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v27.name = str[start:end].decode('utf-8')
          else:
            _v27.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v27.typed_parameters = []
          for i in range(0, length):
            val5 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.key = str[start:end].decode('utf-8')
            else:
              val5.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val5.value = str[start:end].decode('utf-8')
            else:
              val5.value = str[start:end]
            _v27.typed_parameters.append(val5)
          _x = val3
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v26.tokens.append(val3)
        _v28 = val1.ineq
        start = end
        end += 1
        (_v28.comparison_type,) = _get_struct_B().unpack(str[start:end])
        _v29 = _v28.LHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v29.tokens = []
        for i in range(0, length):
          val4 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val4
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v30 = val4.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v30.name = str[start:end].decode('utf-8')
          else:
            _v30.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v30.typed_parameters = []
          for i in range(0, length):
            val6 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.key = str[start:end].decode('utf-8')
            else:
              val6.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.value = str[start:end].decode('utf-8')
            else:
              val6.value = str[start:end]
            _v30.typed_parameters.append(val6)
          _x = val4
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v29.tokens.append(val4)
        _v31 = _v28.RHS
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v31.tokens = []
        for i in range(0, length):
          val4 = rosplan_knowledge_msgs.msg.ExprBase()
          _x = val4
          start = end
          end += 9
          (_x.expr_type, _x.constant,) = _get_struct_Bd().unpack(str[start:end])
          _v32 = val4.function
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v32.name = str[start:end].decode('utf-8')
          else:
            _v32.name = str[start:end]
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v32.typed_parameters = []
          for i in range(0, length):
            val6 = diagnostic_msgs.msg.KeyValue()
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.key = str[start:end].decode('utf-8')
            else:
              val6.key = str[start:end]
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            start = end
            end += length
            if python3:
              val6.value = str[start:end].decode('utf-8')
            else:
              val6.value = str[start:end]
            _v32.typed_parameters.append(val6)
          _x = val4
          start = end
          end += 2
          (_x.op, _x.special_type,) = _get_struct_2B().unpack(str[start:end])
          _v31.tokens.append(val4)
        start = end
        end += 1
        (_v28.grounded,) = _get_struct_B().unpack(str[start:end])
        _v28.grounded = bool(_v28.grounded)
        self.knowledge.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bd = None
def _get_struct_Bd():
    global _struct_Bd
    if _struct_Bd is None:
        _struct_Bd = struct.Struct("<Bd")
    return _struct_Bd
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rosplan_knowledge_msgs/KnowledgeUpdateServiceArrayResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KnowledgeUpdateServiceArrayResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "rosplan_knowledge_msgs/KnowledgeUpdateServiceArrayResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KnowledgeUpdateServiceArrayResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class KnowledgeUpdateServiceArray(object):
  _type          = 'rosplan_knowledge_msgs/KnowledgeUpdateServiceArray'
  _md5sum = 'fe6a67316474d3583f51a383d1cdfadc'
  _request_class  = KnowledgeUpdateServiceArrayRequest
  _response_class = KnowledgeUpdateServiceArrayResponse
